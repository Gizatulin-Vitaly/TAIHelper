package com.reftgres.taihelper.ui.oxygen

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.AdapterView
import android.widget.ArrayAdapter
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.reftgres.taihelper.databinding.FragmentOxigenBinding
import dagger.hilt.android.AndroidEntryPoint
import com.reftgres.taihelper.R

@AndroidEntryPoint
class OxygenMeasurementFragment : Fragment() {

    private val TAG = "OxygenFragment"
    private val viewModel: OxygenMeasurementViewModel by viewModels()
    private var _binding: FragmentOxigenBinding? = null
    private val binding get() = _binding!!
    private lateinit var latestMeasurementsAdapter: LatestMeasurementsAdapter

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        Log.d(TAG, "onCreateView –≤—ã–∑–≤–∞–Ω")
        _binding = FragmentOxigenBinding.inflate(inflater, container, false)
        binding.viewModel = viewModel
        binding.lifecycleOwner = viewLifecycleOwner
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        setupRecyclerView()
        setupObservers()
        setupListeners()

        viewModel.latestMeasurements.observe(viewLifecycleOwner) { list ->
            list.firstOrNull()?.let {
                updateCardAllOxygen(it)
            }
        }

    }

    private fun setupRecyclerView() {
        Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ RecyclerView")
        latestMeasurementsAdapter = LatestMeasurementsAdapter()
        binding.recyclerView.apply {
            adapter = latestMeasurementsAdapter
            layoutManager = LinearLayoutManager(requireContext())
            addItemDecoration(DividerItemDecoration(requireContext(), DividerItemDecoration.VERTICAL))
        }
    }

    private val sensorPositionsMap = mapOf(
        1 to listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604"),
        2 to listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604"),
        3 to listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604"),
        4 to listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604"),
        5 to listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604"),
        6 to listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604"),
        7 to listOf("–ö-603", "–ö-604", "–ö-605", "–ö-606"),
        8 to listOf("–ö-603", "–ö-604", "–ö-605", "–ö-606"),
        9 to listOf("–ö-603", "–ö-604", "–ö-605", "–ö-606"),
        10 to listOf("–ö-603", "–ö-604", "–ö-605", "–ö-606")
    )

    private fun setupObservers() {
        Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π")

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–ø–∏—Å–∫–æ–º –±–ª–æ–∫–æ–≤
        viewModel.blocks.observe(viewLifecycleOwner) { blocks ->
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω—ã –±–ª–æ–∫–∏: ${blocks.size}")

            if (blocks.isNotEmpty()) {
                val firstBlockId = blocks[0].id
                binding.blockSpinner.setSelection(0)
                viewModel.loadSensorsForBlock(firstBlockId)
                viewModel.loadLatestMeasurements(firstBlockId)
            }

            val adapter = ArrayAdapter(
                requireContext(),
                android.R.layout.simple_spinner_item,
                blocks.map { it.name }
            ).apply {
                setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            }
            binding.blockSpinner.adapter = adapter

            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if (blocks.isNotEmpty()) {
                binding.blockSpinner.setSelection(0)
            }
        }

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–ø–∏—Å–∫–æ–º –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        viewModel.sensors.observe(viewLifecycleOwner) { sensors ->
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω—ã –¥–∞—Ç—á–∏–∫–∏: ${sensors.size}")

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã Sensor –ø–æ position
            val sortedSensors = sensors.sortedBy { it.position }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ ViewModel –¥–ª—è onItemSelected
            viewModel.setSortedSensors(sortedSensors) // üîß —Ç—ã –¥–æ–±–∞–≤–∏—à—å —ç—Ç–æ –Ω–∏–∂–µ üëá

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            val sortedSensorTitles = sortedSensors.map { it.position }

            // –°–æ–∑–¥–∞—ë–º –∞–¥–∞–ø—Ç–µ—Ä
            val adapter = ArrayAdapter(
                requireContext(),
                android.R.layout.simple_spinner_item,
                sortedSensorTitles
            ).apply {
                setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            }

            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            binding.sensorSpinner.adapter = adapter

            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
            if (sortedSensors.isNotEmpty()) {
                binding.sensorSpinner.setSelection(0)
                // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ —É–≤–µ–¥–æ–º–∏–º –æ –≤—ã–±–æ—Ä–µ
                viewModel.selectSensorByPosition(sortedSensors[0].position)
            }
        }


        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–∞—Ç—á–∏–∫–æ–º
        viewModel.selectedSensor.observe(viewLifecycleOwner) { sensor ->
            Log.d(TAG, "–í—ã–±—Ä–∞–Ω –¥–∞—Ç—á–∏–∫: ${sensor?.position}")

            sensor?.let {
                binding.tvPositionSensor.text = it.position
                binding.tvNumberSensor.text = it.serialNumber.ifEmpty { "–ù–µ —É–∫–∞–∑–∞–Ω" }
                binding.tvMiddleSensor.text = it.midPoint
                binding.tvAnalogOutput.text = it.outputScale

                // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—á–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é
                viewModel.loadSensorMeasurementHistory(it.position)
            }
        }

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ (–¥–ª—è card_history)
        viewModel.sensorMeasurementHistory.observe(viewLifecycleOwner) { measurements ->
            Log.d(TAG, "‚≠ê –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π: ${measurements.size} –∑–∞–ø–∏—Å–µ–π")

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
            binding.cardHistory.visibility = if (measurements.isEmpty()) View.GONE else View.VISIBLE

            if (measurements.isEmpty()) {
                Log.d(TAG, "‚≠ê –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            } else {
                measurements.forEach { measurement ->
                    Log.d(TAG, "‚≠ê –ò–∑–º–µ—Ä–µ–Ω–∏–µ: ${measurement.date}, –¥–∞—Ç—á–∏–∫–æ–≤: ${measurement.sensors.size}")
                }
            }

            latestMeasurementsAdapter.submitList(measurements)
        }

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏ –±–ª–æ–∫–∞ (–¥–ª—è card_all_oxygen)
        viewModel.latestMeasurements.observe(viewLifecycleOwner) { measurements ->
            Log.d(TAG, "–ü–æ–ª—É—á–µ–Ω—ã –æ–±—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${measurements.size}")

            if (measurements.isNotEmpty()) {
                updateCardAllOxygen(measurements.first())
            } else {
                clearSensorDisplays()
                binding.tvDateControl.text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            }
        }

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Å–µ—Ç–∏
        val networkStatusBar = view?.findViewById<View>(R.id.networkStatusBar)
        viewModel.isOnline.observe(viewLifecycleOwner) { isOnline ->
            Log.d(TAG, "–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏: ${if (isOnline) "–æ–Ω–ª–∞–π–Ω" else "–æ—Ñ–ª–∞–π–Ω"}")
            networkStatusBar?.visibility = if (isOnline) View.GONE else View.VISIBLE
        }
    }

    private fun setupListeners() {
        Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π")

        // –°–ª—É—à–∞—Ç–µ–ª—å –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞
        binding.blockSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                val blocks = viewModel.blocks.value
                if (blocks != null && position >= 0 && position < blocks.size) {
                    val blockId = blocks[position].id
                    Log.d(TAG, "–í—ã–±—Ä–∞–Ω –±–ª–æ–∫: $blockId")

                    updateSensorTitlesForBlock(blockId)

                    viewModel.loadSensorsForBlock(blockId)
                    viewModel.loadLatestMeasurements(blockId)
                }
            }


            override fun onNothingSelected(parent: AdapterView<*>?) {
                Log.d(TAG, "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–æ–≤")
            }
        }

        // –°–ª—É—à–∞—Ç–µ–ª—å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—á–∏–∫–∞
        binding.sensorSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                val selected = viewModel.getSortedSensors().getOrNull(position)
                if (selected != null) {
                    Log.d(TAG, "–í—ã–±—Ä–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞: ${selected.position}")
                    viewModel.selectSensorByPosition(selected.position)
                    viewModel.loadSensorMeasurementHistory(selected.position)
                }
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {
                Log.d(TAG, "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –¥–∞—Ç—á–∏–∫–æ–≤")
            }
        }

        // –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏)
        binding.cardAllOxygen.setOnClickListener {
            Log.d(TAG, "–ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π")
            try {
                findNavController().navigate(R.id.action_oxygenMeasurementFragment_to_all_measurements)
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${e.message}")
                Toast.makeText(requireContext(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun updateSensorTitlesForBlock(blockId: Int) {
        val titles = sensorPositionsMap[blockId] ?: listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604")

        binding.tvFourthSensorTitle.text = titles.getOrNull(0) ?: "--"
        binding.tvSecondSensorTitle.text = titles.getOrNull(1) ?: "--"
        binding.tvThirdSensorTitle.text  = titles.getOrNull(2) ?: "--"
        binding.tvFirstSensorTitle.text  = titles.getOrNull(3) ?: "--"
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
     */
    private fun updateMeasurementsUI(measurements: List<LatestMeasurement>) {
        if (measurements.isEmpty()) {
            Log.d(TAG, "–ù–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            binding.tvDateControl.text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            clearSensorDisplays()
            return
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
        val latestMeasurement = measurements.first()
        Log.d(TAG, "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: ${latestMeasurement.date}, –¥–∞—Ç—á–∏–∫–æ–≤: ${latestMeasurement.sensors.size}")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
        binding.tvDateControl.text = latestMeasurement.date

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤
        updateSensorDisplay(latestMeasurement, "–ö-601", binding.tvFirstSensorTitle, binding.tvFirstIndicate, binding.tvFirstMiddle)
        updateSensorDisplay(latestMeasurement, "–ö-602", binding.tvSecondSensorTitle, binding.tvSecondIndicate, binding.tvSecondMiddle)
        updateSensorDisplay(latestMeasurement, "–ö-603", binding.tvThirdSensorTitle, binding.tvThirdIndicate, binding.tvThirdMiddle)
        updateSensorDisplay(latestMeasurement, "–ö-604", binding.tvFourthSensorTitle, binding.tvFourthIndicate, binding.tvFourthMiddle)
    }

    private fun updateCardAllOxygen(measurement: LatestMeasurement) {
        val blockId = measurement.blockNumber
        val sensorTitles = sensorPositionsMap[blockId] ?: listOf("–ö-601", "–ö-602", "–ö-603", "–ö-604")
        Log.d("SensorUI", "‚û° sensorTitles (–ø–æ –ø–æ–∑–∏—Ü–∏–∏): $sensorTitles")


        Log.d("SensorUI", "sensorTitles = $sensorTitles")
        Log.d("SensorUI", "sensor[0] –±—É–¥–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ 1: ${sensorTitles.getOrNull(0)}")
        Log.d("SensorUI", "sensor[1] –±—É–¥–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ 2: ${sensorTitles.getOrNull(1)}")
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        binding.tvFirstSensorTitle.text  = sensorTitles.getOrNull(0) ?: "--" // –ö-601
        binding.tvSecondSensorTitle.text = sensorTitles.getOrNull(1) ?: "--" // –ö-602
        binding.tvThirdSensorTitle.text  = sensorTitles.getOrNull(2) ?: "--" // –ö-603
        binding.tvFourthSensorTitle.text = sensorTitles.getOrNull(3) ?: "--" // –ö-604

// –û–±–Ω—É–ª—è–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è
        binding.tvFirstIndicate.text  = "--"
        binding.tvSecondIndicate.text = "--"
        binding.tvThirdIndicate.text  = "--"
        binding.tvFourthIndicate.text = "--"

        binding.tvFirstMiddle.text  = ""
        binding.tvSecondMiddle.text = ""
        binding.tvThirdMiddle.text  = ""
        binding.tvFourthMiddle.text = ""

// –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        measurement.sensors.forEach { sensor ->
            val index = sensorTitles.indexOf(sensor.sensorTitle)
            Log.d("SensorUI", "‚¨Ö Firestore sensor: ${sensor.sensorTitle}, index –≤ sensorTitles = $index")

            when (index) {
                0 -> {
                    Log.d("SensorUI", "üü© –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ${sensor.sensorTitle} ‚Üí tvFirstIndicate")
                    binding.tvFirstIndicate.text = sensor.testoValue.ifEmpty { "--" }
                    binding.tvFirstMiddle.text   = "(${sensor.panelValue})"
                }
                1 -> {
                    Log.d("SensorUI", "üü® –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ${sensor.sensorTitle} ‚Üí tvSecondIndicate")
                    binding.tvSecondIndicate.text = sensor.testoValue.ifEmpty { "--" }
                    binding.tvSecondMiddle.text   = "(${sensor.panelValue})"
                }
                2 -> {
                    Log.d("SensorUI", "üüß –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ${sensor.sensorTitle} ‚Üí tvThirdIndicate")
                    binding.tvThirdIndicate.text = sensor.testoValue.ifEmpty { "--" }
                    binding.tvThirdMiddle.text   = "(${sensor.panelValue})"
                }
                3 -> {
                    Log.d("SensorUI", "üü• –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ${sensor.sensorTitle} ‚Üí tvFourthIndicate")
                    binding.tvFourthIndicate.text = sensor.testoValue.ifEmpty { "--" }
                    binding.tvFourthMiddle.text   = "(${sensor.panelValue})"
                }
            }
        }

        binding.tvDateControl.text = measurement.date
    }


    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
     */
    private fun updateSensorDisplay(
        measurement: LatestMeasurement,
        sensorTitle: String,
        titleView: TextView,
        indicateView: TextView,
        middleView: TextView
    ) {
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        titleView.text = sensorTitle

        // –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–∞
        val sensor = measurement.sensors.find { it.sensorTitle == sensorTitle }

        if (sensor != null) {
            Log.d(TAG, "–ù–∞–π–¥–µ–Ω –¥–∞—Ç—á–∏–∫ $sensorTitle: testo=${sensor.testoValue}, correction=${sensor.correctionValue}")
            indicateView.text = sensor.testoValue
            middleView.text = "(${sensor.correctionValue})"
        } else {
            Log.d(TAG, "–î–∞—Ç—á–∏–∫ $sensorTitle –Ω–µ –Ω–∞–π–¥–µ–Ω")
            indicateView.text = "--"
            middleView.text = "(--)"
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
     */
    private fun clearSensorDisplays() {
        binding.tvFirstIndicate.text = "--"
        binding.tvFirstMiddle.text = "(--)"

        binding.tvSecondIndicate.text = "--"
        binding.tvSecondMiddle.text = "(--)"

        binding.tvThirdIndicate.text = "--"
        binding.tvThirdMiddle.text = "(--)"

        binding.tvFourthIndicate.text = "--"
        binding.tvFourthMiddle.text = "(--)"
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}