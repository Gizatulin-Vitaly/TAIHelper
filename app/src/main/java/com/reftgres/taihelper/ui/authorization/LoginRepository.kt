package com.reftgres.taihelper.ui.authorization

import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await
import javax.inject.Inject
import javax.inject.Singleton
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

@Singleton
class LoginRepository @Inject constructor(
    private val auth: FirebaseAuth,
    private val db: FirebaseFirestore
) {

    suspend fun login(email: String, password: String): FirebaseUser {
        Log.d("LoginDebug", "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: $email")
        return suspendCoroutine { continuation ->
            auth.signInWithEmailAndPassword(email, password)
                .addOnCompleteListener { task ->
                    if (task.isSuccessful) {
                        Log.d("LoginDebug", "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                        val user = auth.currentUser
                        if (user != null) {
                            continuation.resume(user)
                        } else {
                            Log.e("LoginDebug", "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞")
                            continuation.resumeWithException(Exception("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                        }
                    } else {
                        Log.e("LoginDebug", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${task.exception?.message}")
                        continuation.resumeWithException(task.exception ?: Exception("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"))
                    }
                }
        }
    }

    fun logout() {
        auth.signOut()
    }

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UID
    suspend fun getUserData(uid: String): UserData {
        return try {
            val snapshot = db.collection("users").document(uid).get().await()
            val name = snapshot.getString("name") ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            val status = snapshot.getString("status") ?: "–û–±—ã—á–Ω—ã–π"
            UserData(name, status)
        } catch (e: Exception) {
            throw Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
        }
    }
}

// üîπ –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
data class UserData(val name: String, val status: String)
