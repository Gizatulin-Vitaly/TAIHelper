package com.reftgres.taihelper.ui.oxygen

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.findNavController
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.reftgres.taihelper.R
import com.reftgres.taihelper.databinding.AllMeasurementsFragmentBinding
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class AllMeasurementsFragment : Fragment() {

    private val TAG = "AllMeasurementsFragment"
    private val viewModel: OxygenMeasurementViewModel by viewModels()
    private var _binding: AllMeasurementsFragmentBinding? = null
    private val binding get() = _binding!!
    private lateinit var allMeasurementsAdapter: AllMeasurementsAdapter

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        Log.d(TAG, "onCreateView –≤—ã–∑–≤–∞–Ω")
        _binding = AllMeasurementsFragmentBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        val blockId = arguments?.getInt("blockId") ?: -1
        Log.d(TAG, "üß© –ü–æ–ª—É—á–µ–Ω blockId = $blockId –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

        if (blockId != -1) {
            viewModel.loadLatestMeasurements(blockId) // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        } else {
            viewModel.loadLastTenMeasurements() // –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ blockId
        }
        super.onViewCreated(view, savedInstanceState)
        requireActivity().findViewById<BottomNavigationView>(R.id.bottomNavigationView)?.visibility = View.GONE


        setupRecyclerView()
        setupObservers()

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        viewModel.loadLastTenMeasurements()
    }

    private fun setupRecyclerView() {
        Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ RecyclerView")
        allMeasurementsAdapter = AllMeasurementsAdapter()
        binding.recyclerViewSecond.apply {
            adapter = allMeasurementsAdapter
            layoutManager = LinearLayoutManager(requireContext())
            addItemDecoration(DividerItemDecoration(requireContext(), DividerItemDecoration.VERTICAL))
        }
    }

    private fun setupObservers() {
        Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π")

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
        viewModel.latestMeasurements.observe(viewLifecycleOwner) { measurements ->
            Log.d(TAG, "üì• –ü–æ–ª—É—á–µ–Ω–æ ${measurements.size} –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞")
            allMeasurementsAdapter.submitList(measurements)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        requireActivity().findViewById<BottomNavigationView>(R.id.bottomNavigationView)?.visibility = View.VISIBLE
        _binding = null
    }
}