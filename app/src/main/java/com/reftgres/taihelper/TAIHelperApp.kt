package com.reftgres.taihelper

import android.app.Application
import android.util.Log
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.os.LocaleListCompat
import androidx.datastore.core.DataStore
import androidx.hilt.work.HiltWorkerFactory
import androidx.work.Configuration
import com.google.firebase.FirebaseApp
import com.reftgres.taihelper.service.NetworkConnectivityService
import com.reftgres.taihelper.service.SyncManager
import dagger.hilt.android.HiltAndroidApp
import javax.inject.Inject
import androidx.datastore.preferences.core.Preferences
import com.reftgres.taihelper.ui.settings.LanguagePreferencesRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.launch
import kotlinx.coroutines.*


@HiltAndroidApp
class TAIHelperApp : Application(), Configuration.Provider {
    @Inject
    lateinit var dataStore: DataStore<Preferences>
    @Inject
    lateinit var workerFactory: HiltWorkerFactory
    private val TAG = "TAIHelperApp"
    @Inject
    lateinit var syncManager: SyncManager
    @Inject
    lateinit var networkService: NetworkConnectivityService


    override fun onCreate() {
        super.onCreate()

        // üó£ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª–∏
        CoroutineScope(Dispatchers.Default).launch {
            val prefs = dataStore.data.first()
            val langTag = prefs[LanguagePreferencesRepository.LANGUAGE_KEY] ?: "ru"
            val locales = LocaleListCompat.forLanguageTags(langTag)
            withContext(Dispatchers.Main) {
                AppCompatDelegate.setApplicationLocales(locales)
            }
            // üé® –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
            val themeName = prefs[com.reftgres.taihelper.ui.settings.ThemePreferencesRepository.THEME_KEY]
                ?: com.reftgres.taihelper.ui.settings.AppTheme.SYSTEM.name
            val mode = when (com.reftgres.taihelper.ui.settings.AppTheme.valueOf(themeName)) {
                com.reftgres.taihelper.ui.settings.AppTheme.LIGHT -> AppCompatDelegate.MODE_NIGHT_NO
                com.reftgres.taihelper.ui.settings.AppTheme.DARK -> AppCompatDelegate.MODE_NIGHT_YES
                com.reftgres.taihelper.ui.settings.AppTheme.SYSTEM -> AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM
            }
            withContext(Dispatchers.Main) {
                AppCompatDelegate.setDefaultNightMode(mode)
                setupSync()
            }
        }
    }

    override val workManagerConfiguration: Configuration
        get() {
            return if (::workerFactory.isInitialized) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Hilt factory, –µ—Å–ª–∏ –æ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                Configuration.Builder()
                    .setWorkerFactory(workerFactory)
                    .build()
            } else {
                // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ workerFactory –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                Log.w(TAG, "WorkerFactory –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                Configuration.Builder().build()
            }
        }

    private fun setupSync() {
        Log.d(TAG, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        syncManager.setupPeriodicSync()

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        syncManager.requestSync()

        Log.d(TAG, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    }

    override fun onTerminate() {
        super.onTerminate()
        Log.d(TAG, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        if (::networkService.isInitialized) {
            Log.d(TAG, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏")
            networkService.stopMonitoring()
        }

        if (::syncManager.isInitialized) {
            Log.d(TAG, "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ SyncManager")
            syncManager.cleanup()
        }
    }
}